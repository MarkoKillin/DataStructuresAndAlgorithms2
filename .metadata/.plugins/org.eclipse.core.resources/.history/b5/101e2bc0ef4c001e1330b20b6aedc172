import java.util.Stack;

public class EditDistance {
	private String s1, s2;
	private int[][] d;
	public EditDistance(String s1, String s2) {
		super();
		this.s1 = s1;
		this.s2 = s2;
		this.d = new int[s1.length()+1][s2.length()+1];
		compute();
	}
	
	public void compute() {
		for (int i = 0; i < s1.length()+1; i++) d[i][0] = i;
		for (int i = 0; i < s2.length()+1; i++) d[0][i] = i;
		for (int i = 1; i < s1.length()+1; i++) {
			for (int j = 1; j < s2.length()+1; j++) {
				char c1 = s1.charAt(i-1);
				char c2 = s2.charAt(j-1);
				if(c1==c2)
					d[i][j] = d[i-1][j-1];
				else {
					int del = d[i-1][j];
					int add = d[i][j-1];
					int sub = d[i-1][j-1];
					d[i][j] = 1 + min3(del, add, sub);					
				}
			}
		}
	}

	private int min3(int del, int add, int sub) {
		int min = del;
		if(add<min) min = add;
		if(sub<min) min = sub;
		return min;
	}
	
	public int getDistance() {
		return d[s1.length()][s2.length()];
	}
	
	public void getExplanation() {
		int i = s1.length();
		int j = s2.length();
		Stack<String> m = new Stack<>();
		int[] di = {-1,-1,0};
		int[] dj = {-1,0,-1};
		while(d[i][j]>0) {
			int min = Integer.MAX_VALUE;
			int minIndex = -1;
			for (int k = 0; k < dj.length; k++) {
				if(i+di[k] >= 0 && j+dj[k] >= 0) {
					if(d[i+di[k]][j+dj[k]] < min) {
						min = d[i+di[k]][j+dj[k]];
						minIndex = k;
					}
				}
			}
			if(minIndex==0) {
				if(d[i][j]!=min)
					m.push(s1.charAt(i-1) + " --> " + s2.charAt(j-1));
			} else if(minIndex==1) {
				i--;
				m.push(s1.charAt(i) + " deleted");
			} else {
				j--;
				m.push(s2.charAt(j) + " inserted");
			}
		}
		if(m.isEmpty())
			System.out.println("Identical");
		else {
			while(!m.isEmpty()) {
				System.out.println(m.pop());
			}
		}
	}
}
