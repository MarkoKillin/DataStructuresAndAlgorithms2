package implementacija;

import interfejsi.Set;

public class CHashSet<T> implements Set<T> {
	private static final int DEF = 101;
	private enum Status {
		EMPTY,OCCUPIED,DELETED
	}
	private Object[] table;
	private Status[] status;
	private int numElements;
	
	public CHashSet(int size) {
		if(size<=0)
			throw new IllegalArgumentException();
		reset(size);
	}
	private void reset(int size) {
		this.table = new Object[size];
		this.status = new Status[size];
		this.numElements = 0;
		for (int i = 0; i < status.length; i++) {
			status[i] = Status.EMPTY;
		}
	}
	public CHashSet() {
		this(DEF);
	}

	private int hash(T o) {
		if(o==null)
			throw new IllegalArgumentException();
		return Math.abs(o.hashCode()%table.length);
	}
	
	private int searchCollisionChain(T element, int hashValue) {
		int maxChainLenght = (table.length-1)/2;
		int i = 0;
		int currentPosition = (hashValue+i*i)%table.length;
		while(i<=maxChainLenght && status[currentPosition]!=Status.EMPTY) {
			if(status[currentPosition]==Status.OCCUPIED && table[currentPosition].equals(element))
				return currentPosition;
			else {
				i++;
				currentPosition = (hashValue+i*i)%table.length;				
			}
		}
		return -1;
	}

	@Override
	public boolean member(T element) {
		return searchCollisionChain(element, hash(element)) >= 0;
	}

	@Override
	public boolean remove(T element) {
		int pos = searchCollisionChain(element, hash(element));
		if(pos==-1)
			return false;
		status[pos] = Status.DELETED;
		numElements--;
		return true;
	}
	
	@Override
	public boolean insert(T element) {
		int hashValue = hash(element);
		int i = 0;
		int maxChainLength = (table.length-1)/2;
		boolean endOfChain = false;
		int firstAvailablePostition = -1;
		while(!endOfChain && i<=maxChainLength) {
			int currentPosition = (hashValue+i*i)%table.length;
			if(status[currentPosition]==Status.OCCUPIED) {
				if(table[currentPosition].equals(element)) {
					return false;
				}
			} else {
				if(firstAvailablePostition==-1)
					firstAvailablePostition = currentPosition;
				if(status[currentPosition] == Status.EMPTY)
					endOfChain = true;
			}
			i++;
		}
		if(firstAvailablePostition==-1 || loadFactor()>0.7) {
			expand();
			hashValue = hash(element);
			add(element, hashValue);
		} else {
			table[firstAvailablePostition] = element;
			status[firstAvailablePostition] = Status.OCCUPIED;
			numElements++;
		}
		return true;
	}
	private void add(T element, int hashValue) {
		int i = 0;
		boolean found = false;
		while(!found) {
			int currentPostion = (hashValue+i*i)%table.length;
			if(status[currentPostion] != Status.OCCUPIED) {
				table[currentPostion] = element;
				status[currentPostion] = Status.OCCUPIED;
				numElements++;
				found = true;
			}
			i++;
		}
	}
	private void expand() {
		// TODO Auto-generated method stub
		
	}
	private double loadFactor() {
		// TODO Auto-generated method stub
		return 0;
	}
	
}
































