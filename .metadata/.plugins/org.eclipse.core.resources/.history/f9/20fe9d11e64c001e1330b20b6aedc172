package Knapsack;

public class KnapsackRecursive {
	private int knapsackWeight;
	private Item[] items;
	private boolean[] in;
	private boolean[] maxConfig;
	private int maxProfit;
	
	
	
	
	public KnapsackRecursive(int knapsackWeight, Item[] items) {
		super();
		this.knapsackWeight = knapsackWeight;
		this.items = items;
		this.in = new boolean[items.length];
		this.maxConfig = new boolean[items.length];
		this.maxProfit = 0;
	}

	public void find() {
		find(0, 0, 0);
	}


	private void find(int k, int currentWeight, int currentProfit) {
		if(k==items.length) {
			if(currentProfit > maxProfit) {
				maxProfit = currentProfit;
				for (int i = 0; i < in.length; i++) {
					maxConfig[i] = in[i];
				}
			}
		} else {
			if(items[k].getWeight()+currentWeight<=knapsackWeight) {
				in[k] = true;
				find(k+1, currentWeight+items[k].getWeight(), currentProfit+items[k].getProfit());
			}
			in[k] = false;
			find(k+1, currentWeight, currentProfit);
		}
	}

	public void printSolution() {
		System.out.println("Max profit: " + maxProfit);
		System.out.println("Solution: ");
		for (int i = 0; i < items.length; i++) {
			if(maxConfig[i])
				System.out.println(items[i]);
		}
	}
	
}
