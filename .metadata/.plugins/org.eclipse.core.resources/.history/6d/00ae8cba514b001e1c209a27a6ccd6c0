import java.nio.channels.Pipe;
import java.util.Arrays;
import java.util.Comparator;

public class MinDistance2D {
	private Point2d[] points;

	public MinDistance2D(Point2d[] points) {
		if(points.length < 2)
			throw new IllegalArgumentException();
		this.points = points;
	}
	private static class ComparatorX implements Comparator<Point2d>{
		public int compare(Point2d p1, Point2d p2) {
			double dx = p1.x-p2.x;
			if(dx<0) return -1;
			else if(dx>0) return 1;
			else return 0;
		}
	}
	
	private static class ComparatorY implements Comparator<Point2d>{
		public int compare(Point2d p1, Point2d p2) {
			double dx = p1.y-p2.y;
			if(dx<0) return -1;
			else if(dx>0) return 1;
			else return 0;
		}
	}
	
	public double findDQ() {
		Arrays.sort(points, new ComparatorX());
		for (int i = 0; i < points.length-1; i++) {
			if(points[i].coincident(points[i+1]))
				return 0.0;
		}
		return findDQ(0, points.length-1);
	}

	private double findDQ(int from, int to) {
		if(from==to)
			return Double.MAX_VALUE;
		if(to-from==1)
			return points[to].distance(points[from]);
		int median = (from+to)/2;
		double dl = findDQ(from, median);
		double dr = findDQ(median+1, to);
		double delta = Math.min(dl, dr);
		double cross = findMinCrossing(from, to, median, delta);
		return Math.min(delta, cross);
	}

	private double findMinCrossing(int from, int to, int median, double delta) {
		// TODO Auto-generated method stub
		return 0;
	}
}

























