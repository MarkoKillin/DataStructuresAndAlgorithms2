package def;

import interfejsi.Set;

public class BST<T extends Comparable<T>> implements Set<T>{
	public class SearchResult{
		Btnode<T> node;
		Btnode<T> parent;
		public SearchResult(Btnode<T> node, Btnode<T> parent) {
			super();
			this.node = node;
			this.parent = parent;
		}
	}
	private Btnode<T> root = null;
	
	private SearchResult search(T info) {
		Btnode<T> current = root;
		Btnode<T> prev = null;
		boolean found = false;
		while(current!=null && !found) {
			int cmp = info.compareTo(current.getInfo());
			if(cmp==0)
				found=true;
			else {
				prev = current;
				if(cmp<0) current = current.getLeft();
				else current = current.getRight();
			}
		}
		return new SearchResult(current, prev);
	}

	@Override
	public boolean member(T element) {
		SearchResult sr = search(element);
		return sr.node!=null;
	}

	@Override
	public boolean insert(T element) {
		if(root==null) {
			root = new Btnode<>(element);
			return true;
		}
		SearchResult sr = search(element);
		if(sr.node!=null)
			return false;
		else {
			Btnode<T> n = new Btnode<>(element);
			if(sr.parent.compareTo(n) < 0)
				sr.parent.setLeft(n);
			else
				sr.parent.setRight(n);
		}
		return true;
	}

	@Override
	public boolean remove(T element) {
		SearchResult sr = search(element);
		if(sr.node==null)
			return false;
		Btnode<T> toRemove = sr.node;
		Btnode<T> parent = sr.parent;
		if(toRemove.getLeft()==null && toRemove.getRight()==null)
			removeLeaf(toRemove, parent);
		else if(toRemove.getLeft()==null || toRemove.getRight()==null)
			removeInternalWithOneChild(toRemove, parent);
		else
			removeInternal(toRemove, parent);
		return true;
	}

	private void removeLeaf(Btnode<T> toRemove, Btnode<T> parent) {
		if(parent == null)
			root = null;
		else {
			if(parent.getLeft() == toRemove)
				parent.setLeft(null);
			else
				parent.setRight(null);
		}
	}

	private void removeInternalWithOneChild(Btnode<T> toRemove, Btnode<T> parent) {
		Btnode<T> child = toRemove.getLeft();
		if(child==null)
			child = toRemove.getRight();
		if(parent==null)
			root = child;
		else {
			if(parent.getLeft() == toRemove)
				parent.setLeft(child);
			else
				parent.setRight(child);
		}
	}

	private void removeInternal(Btnode<T> toRemove, Btnode<T> parent) {
		Btnode<T> min = toRemove.getRight();
		Btnode<T> minParent = toRemove;
		
		while(min.getLeft()!=null) {
			minParent = min;
			min = min.getLeft();
		}
		T minInfo = min.getInfo(); 
		
		if(minParent == toRemove)
			minParent.setRight(min.getLeft());
		else
			minParent.setLeft(min.getRight());
		toRemove.setInfo(minInfo);
	}
	
}






















