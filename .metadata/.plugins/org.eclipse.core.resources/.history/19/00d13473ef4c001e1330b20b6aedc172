public class KnapsackDP {
	private int knapsackWeight;
	private int[][] mp;
	private Item[] items;
	public KnapsackDP(int knapsackWeight, Item[] items) {
		this.knapsackWeight = knapsackWeight;
		this.items = items;
		this.mp = new int[items.length][knapsackWeight+1];
	}
	
	public int find() {
		for (int i = 0; i < items.length; i++) {
			mp[i][0] = 0;
		}
		for (int i = 0; i < knapsackWeight+1; i++) {
			if(items[0].getWeight()<=i)
				mp[0][i] = items[0].getProfit();
			else
				mp[0][i] = 0;
		}
		for (int i = 1; i < items.length; i++) {
			for (int j = 1; j < knapsackWeight+1; j++) {
				int profitAdd = 0;
				if(items[i].getWeight()<=j) 
					profitAdd = mp[i-1][j-items[i].getWeight()] + items[i].getProfit();
				int profitSkip = mp[i-1][j];
				mp[i][j] = Math.max(profitAdd, profitSkip);
			}
		}
		return mp[items.length-1][knapsackWeight];
	}
}
