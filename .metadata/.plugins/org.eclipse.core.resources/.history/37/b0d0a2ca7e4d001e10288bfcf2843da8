package implementacija;

import interfejsi.Set;

public class CHashSet<T> implements Set<T> {
	private static final int DEF = 101;
	private enum Status{
		EMPTY,OCCUPIED,DELETED
	}
	private Object[] table;
	private Status[] status;
	private int numElements;
	public CHashSet(int size) {
		if(size<=0)
			throw new IllegalArgumentException();
		reset(size);
	}
	private void reset(int size) {
		this.table = new Object[size];
		this.status = new Status[size];
		this.numElements = 0;
		for (int i = 0; i < status.length; i++) {
			status[i] = Status.EMPTY;
		}
	}
	public CHashSet() {
		this(DEF);
	}
	
	private int hash(T o) {
		if(o==null)
			throw new IllegalArgumentException();
		return Math.abs(o.hashCode()%table.length);
	}
	
	private int searchCollisionChain(T element, int hashValue) {
		int maxChainLength = (table.length-1)/2;
		int i = 0;
		int currentPos = hashValue;
		while(status[currentPos]!=Status.EMPTY && i<=maxChainLength) {
			if(status[currentPos]==Status.OCCUPIED && table[currentPos].equals(element))
				return currentPos;
			i++;
			currentPos = (hashValue+i*i)%table.length;
		}
		return -1;
	}
	@Override
	public boolean member(T element) {
		return searchCollisionChain(element, hash(element)) >= 0;
	}
	@Override
	public boolean remove(T element) {
		int pos = searchCollisionChain(element, hash(element));
		if(pos==-1)
			return false;
		else {
			status[pos] = Status.DELETED;
			numElements--;
			return true;
		}
	}
	@Override
	public boolean insert(T element) {
		int hashValue = hash(element);
		int i = 0;
		int maxChainLength = (table.length-1)/2;
		int firstAvailablePos = -1;
		boolean endOfChain = false;
		while(i<=maxChainLength && !endOfChain) {
			int currentPosition = (hashValue+i*i)%table.length;
			if(status[currentPosition]==Status.OCCUPIED) {
				if(table[currentPosition].equals(element))
					return false;
			} else {
				if(firstAvailablePos==-1)
					firstAvailablePos = currentPosition;
				if(status[currentPosition]==Status.EMPTY)
					endOfChain = true;
			}
			i++;
		}
		if(firstAvailablePos==-1 || loadFactor()>0.7) {
			expand();
			hashValue = hash(element);
			add(element, hashValue);
		} else {
			status[firstAvailablePos]=Status.OCCUPIED;
			table[firstAvailablePos] = element;
			numElements++;
		}
		return true;
	}
	private void add(T element, int hashValue) {
		boolean found = false;
		int i = 0;
		while(!found) {
			int currentPos = (hashValue+i*i)%table.length;
			if(status[currentPos]!=Status.OCCUPIED) {
				status[currentPos] = Status.OCCUPIED;
				table[currentPos] = element;
				numElements++;
				found = true;
			}
			i++;
		}
	}
	private double loadFactor() {
		return (double)numElements/(double)table.length;
	}
	private void expand() {
		int size = 2*table.length;
		while(!isPrime(size))
			size++;
		Object[] oT = table;
		Status[] oS = status;
		reset(size);
		for (int i = 0; i < oS.length; i++) {
			T e = (T) oT[i];
			add(e, hash(e));
		}
	}
	private boolean isPrime(int size) {
		for (int i = 2; i*i <= size; i++) {
			if(size%i==0)
				return false;
		}
		return true;
	}
}
































