import java.util.Stack;

public class EditDistance {
	private String s1,s2;
	private int[][] d;
	public EditDistance(String s1, String s2) {
		super();
		this.s1 = s1;
		this.s2 = s2;
		this.d = new int[s1.length()+1][s2.length()+1];
	}
	
	public void distance() {
		for (int i = 0; i < s1.length()+1; i++) d[i][0] = i;
		for (int i = 0; i < s2.length()+1; i++) d[0][i] = i;
		for (int i = 1; i < s1.length()+1; i++) {
			for (int j = 1; j < s2.length()+1; j++) {
				char c1 = s1.charAt(i-1);
				char c2 = s2.charAt(j-1);
				if(c1==c2)
					d[i][j] = d[i-1][j-1];
				else {
					int add = d[i][j-1];
					int sub = d[i-1][j-1];
					int del = d[i-1][j];
					d[i][j] = 1 + min3(add,sub,del);
				}
			}
		}
	}

	private int min3(int add, int sub, int del) {
		int min = add;
		if(min>sub)
			min = sub;
		if(min>del)
			min = del;
		return min;
	}
	
	public int getDistance() {
		return d[s1.length()][s2.length()];
	}
	
	public void getExplanation() {
		Stack<String> s = new Stack<>();
		int i = s1.length();
		int j = s2.length();
		int[] di = {-1,-1,0};
		int[] dj = {-1,0,-1};
		while(d[i][j]>0) {
			int min = Integer.MAX_VALUE;
			int minIndex = -1;
			for (int k = 0; k < dj.length; k++) {
				if(i+di[k]>=0 && j+dj[k]>=0) {
					if(d[i+di[k]][j+dj[k]] < min) {
						min = d[i+di[k]][j+dj[k]];
						minIndex = k;
					}
				}
			}
			if(minIndex == 0) {
				if(d[i][j] != min)
					s.push(s1.charAt(i-1) + " --> " + s2.charAt(j-1));
				i--;j--;
			} else if(minIndex == 1) {
				i--;
				s.push(s1.charAt(i) + " deleted");
			} else {
				j--; s.push(s2.charAt(j) + " inserted");
			}
		}
		if(s.isEmpty())
			System.out.println("Identical");
		else {
			while(!s.isEmpty()) {
				System.out.println(s.pop());
			}
		}
	}
	
	public void printMatrix() {
		System.out.print("   ");
		for (int i = 0; i < s2.length(); i++) {
			System.out.print(s2.charAt(i) + " ");
		}
		System.out.println();
		for (int i = 0; i < s1.length()+1; i++) {
			if(i==0)
				System.out.print(" ");
			else 
				System.out.print(s1.charAt(i-1) + " ");
			for (int j = 0; j < s2.length()+1; j++) {
				System.out.print(d[i][j] + " ");
			}
			System.out.println();
		}
	}
}
