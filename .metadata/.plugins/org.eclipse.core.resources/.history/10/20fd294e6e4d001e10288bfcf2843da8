
public class HeapSort {
	public static <T extends Comparable<T>> void sort(T[] arr) {
		int lastIndex = arr.length-1;
		int lastParent = (lastIndex-1)/2;
		while(lastParent>=0) {
			makeHeap(arr, lastParent, lastIndex);
			lastParent--;
		}
		int end = lastIndex;
		while(end>0) {
			T tmp = arr[0];
			arr[0] = arr[end];
			arr[end] = tmp;
			end--;
			makeHeap(arr, 0, end);
		}
	}

	private static <T extends Comparable<T>> void makeHeap(T[] arr, int parentIndex, int end) {
		boolean heapRestored = false;
		while(!heapRestored) {
			int maxSonIndex = getMaxSon(arr, parentIndex, end);
			if(maxSonIndex==-1)
				heapRestored=true;
			else {
				T parent = arr[parentIndex];
				T son = arr[maxSonIndex];
				if(parent.compareTo(son) > 0)
					heapRestored=true;
				else {
					T tmp = arr[parentIndex];
					arr[parentIndex] = arr[maxSonIndex];
					arr[maxSonIndex] = tmp;
					parentIndex = maxSonIndex;
				}
			}
		}
	}

	private static <T extends Comparable<T>> int getMaxSon(T[] arr, int parentIndex, int end) {
		int maxSonIndex = -1;
		int son1Index = 2*parentIndex+1;
		int son2Index = 2*parentIndex+2;
		if(son1Index <= end)
			maxSonIndex = son1Index;
		if(son2Index <= end) {
			if(arr[son1Index].compareTo(arr[son2Index]) < 0)
				maxSonIndex = son2Index;
		}
		return maxSonIndex;
	}

}
