
public class SortableList<T extends Comparable<T>> {
	private class Node{
		T info;
		Node next;
		public Node(T info) {
			super();
			this.info = info;
		}
	}
	public void add(T info) {
		Node n = new Node(info);
		n.next = root;
		root = n;
	}
	private Node root=null;
		
	public void insertionSort() {
		if(root==null || root.next==null)
			return;
		Node lastSorted = root;
		while(lastSorted.next!=null) {
			Node firstUnsorted = lastSorted.next;
			if(firstUnsorted.info.compareTo(lastSorted.info) > 0)
				lastSorted = firstUnsorted;
			else if(firstUnsorted.info.compareTo(root.info) < 0) {
				lastSorted.next = firstUnsorted.next;
				firstUnsorted.next = root;
				root = firstUnsorted;
			} else {
				Node current = root, prev = null;
				while(current.info.compareTo(firstUnsorted.info) <= 0) {
					prev = current;
					current = current.next;
				}
				lastSorted.next = firstUnsorted.next;
				firstUnsorted.next = current;
				prev.next = firstUnsorted;
			}
		}
	}
	
	public void mergeSort() {
		if(root != null)
			root = mergeSort(root);
	}

	private SortableList<T>.Node mergeSort(SortableList<T>.Node root2) {
		// TODO Auto-generated method stub
		return null;
	}
}
